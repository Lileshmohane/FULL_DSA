#include<bits/stdc++.h>
using namespace std;
class node{
    public:
    int data;
    node*left;
    node*right;
    //  constructer
    node(int d ){
        this->data= d;
        this->left = NULL;
        this->right = NULL;
    }
};
//  create a function

// create a tree
node*  buildtree(node* root){
    cout<<" enter a data"<<endl;
    int data;
    cin>>data;
    root =  new node(data);
    if(data==-1){
        return  NULL;
    }
    cout<<" enter a data in left node :"<<endl;
    root->left =buildtree(root->left);
    cout <<"enter a data and inserting in right"<<endl;
    root->right =buildtree(root->right);
}
// level order 
void levelorder(node* root){
    queue<node* >q;
    q.push(root);
    // saperater
    q.push(NULL);
    while (!q.empty())
    {
     
       node* temp =q.front();
      
       q.pop();
       //  if temp  is null  i.e. before level  complete
       if (temp ==NULL)
       {
       cout<<endl;
       if (!q.empty())
       {
        // q have a element 
        q.push(NULL);
       }
       }
       else
       {
         cout<<temp->data <<" ";
        if (temp ->left)
       {
         q.push(temp->left);
       }
       if (temp ->right)
       {
         q.push(temp->right);
       }
       }  
    }
}
void inorder(node* root){
 // base case
 if (root == NULL)
 {
  return;
 }
 //l n r
 inorder(root->left);
 cout<< root ->data <<" ";
  inorder(root->right);
}

void preorder(node* root){
 // base case
 if (root == NULL)
 {
  return;
 }
 //n l r
  cout<< root ->data <<" ";
  preorder(root->left);
  preorder(root->right);
}

void postorder(node* root){
 // base case
 if (root == NULL)
 {
  return;
 }
 //lrl
 
  postorder(root->left);
  postorder(root->right);
    cout<< root ->data <<" ";
}
int main(){
node* root = NULL;
// creating a tree
root = buildtree(root);
// 1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1
//  level order 
levelorder(root);

cout<<"inorder travelsel is :"<<endl;
inorder(root);
cout<<"preorder travelsel is :"<<endl;
preorder(root);

cout<<"postorder travelsel is :"<<endl;
postorder(root);
return 0;
}
